export interface FieldDefinition {
  name: string;
  label?: string;
  description?: string;
  type?: string;
  controlType?: string;
  placeholder?: string;
  defaultValue?: any;
  group?: string;
  order?: number;
  width?: number | string;
  isFlex?: boolean;
  displayOrientation?: string;
  disabled?: boolean;
  readOnly?: boolean;
  multiple?: boolean;
  editable?: boolean;
  validationMode?: string;
  unique?: boolean;
  mask?: string;
  sortable?: boolean;
  conditionalRequired?: (() => boolean) | boolean;
  viewOnlyStyle?: string;
  validationTriggers?: string[];
  hidden?: boolean;
  tableHidden?: boolean;
  formHidden?: boolean;
  filterable?: boolean;
  conditionalDisplay?: () => boolean;
  dependentField?: string;
  resetOnDependentChange?: boolean;
  inlineEditing?: boolean;
  transformValueFunction?: (val: any) => any;
  debounceTime?: number;
  helpText?: string;
  hint?: string;
  hiddenCondition?: any;
  tooltipOnHover?: boolean;
  icon?: string;
  iconPosition?: string;
  iconSize?: string | number;
  iconColor?: string;
  iconClass?: string;
  iconStyle?: string;
  iconFontSize?: string | number;
  valueField?: string;
  displayField?: string;
  endpoint?: string;
  resourcePath?: string;
  emptyOptionText?: string;
  options?: { key: string; value: string }[];
  filter?: any;
  filterCriteria?: any;
  searchable?: boolean;
  selectAll?: boolean;
  maxSelections?: number;
  optionLabelKey?: string;
  optionValueKey?: string;
  filterOptions?: any[];
  filterControlType?: string;
  numericFormat?: string;
  numericStep?: number;
  numericMin?: number;
  numericMax?: number;
  numericMaxLength?: number;

  optionGroups?: { key: string; value: string }[];
  disabledOptions?: string[];
  buttons?: any[];

  required?: boolean;
  requiredMessage?: string;
  minLength?: number;
  minLengthMessage?: string;
  maxLength?: number;
  maxLengthMessage?: string;
  min?: number;
  max?: number;
  rangeMessage?: string;
  pattern?: string;
  patternMessage?: string;
  allowedFileTypes?: string[];
  fileTypeMessage?: string;
  maxFileSize?: number;
  customValidator?: Function;
  asyncValidator?: Function;
  minWords?: number;

  [key: string]: any;
}
